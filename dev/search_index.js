var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = Cairn","category":"page"},{"location":"#Cairn","page":"Home","title":"Cairn","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for Cairn.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [Cairn]","category":"page"},{"location":"#Cairn.ActiveLearningTrigger","page":"Home","title":"Cairn.ActiveLearningTrigger","text":"Abstract type for defining criteria triggering the active learning step during simulation.\n\n\n\n\n\n","category":"type"},{"location":"#Cairn.DoubleWell","page":"Home","title":"Cairn.DoubleWell","text":"DoubleWell(; force_units, energy_units)\n\nThe double well potential energy surface with 2 minima.\n\nThe potential energy is defined as\n\nV(xy) = (16)*(4*(1-x^2-y^2)^2 + 2*(x^2-2)^2 + ((x+y)^2-1)^2 + ((x-y)^2-1)^2)\n\nThis potential is only compatible with 2D systems.\n\n\n\n\n\n","category":"type"},{"location":"#Cairn.GeneralInteraction","page":"Home","title":"Cairn.GeneralInteraction","text":"A general interaction that applies to single atoms (no multi-element interactions). Custom general interactions should sub-type this abstract type.\n\n\n\n\n\n","category":"type"},{"location":"#Cairn.Himmelblau","page":"Home","title":"Cairn.Himmelblau","text":"Himmelblau(; force_units, energy_units)\n\nThe Himmelblau potential energy surface with 4 minima.\n\nThe potential energy is defined as\n\nV(xy) = (x^2 + y - 11)^2 + (x + y^2 - 7)^2\n\nThis potential is only compatible with 2D systems.\n\n\n\n\n\n","category":"type"},{"location":"#Cairn.MLInteraction","page":"Home","title":"Cairn.MLInteraction","text":"A machine learning interatomic potential defining interactions between sets of atoms. Custom machine learning interactions should sub-type this abstract type.\n\n\n\n\n\n","category":"type"},{"location":"#Cairn.MaxVol-Tuple{Any}","page":"Home","title":"Cairn.MaxVol","text":"MaxVol(feature_func; thresh::Real=1.0)\n\nAn active learning trigger activated after the D-optimality based extrapolation grade exceeds a threshold thresh.\n\n\n\n\n\n","category":"method"},{"location":"#Cairn.MullerBrownRot","page":"Home","title":"Cairn.MullerBrownRot","text":"MullerBrownRotated(; A, a, b, c, x0, y0, force_units, energy_units)\n\nThe MÃ¼ller-Brown potential energy surface, rotated counter-clockwise (default by 45 degrees).\n\nThe potential energy is defined as\n\nV(xy) = sum_n=1^4 A_k expa_k(x-x_k^0)^2 + b_k(x-x_k^0)(y-y_k^0) + c_k(y-y_k^0)^2\n\nwhere A, a, b, c, x0, y0 are 4-element SVectors with standard defaults.\n\nThis potential is only compatible with 2D systems. It is often used for testing algorithms that find transition states or explore minimum energy pathways. There are 3 minima and 2 saddle points with the default parameters.\n\n\n\n\n\n","category":"type"},{"location":"#Cairn.PolynomialChaos","page":"Home","title":"Cairn.PolynomialChaos","text":"PolynomialChaos{P, F, E} <: MLInteraction\n\nTotal-degree polynomial chaos expansion (PCE) model defining the potential energy function for a single-atom system.\n\nArguments\n\np :: Integer                : total polynomial degree\nd :: Integer                : dimension\nBasisFamily :: P            : family of basis functions from SpecialPolynomials\nbasis :: Vector{Vector}     : set of basis functions\ngbasis :: Vector{Vector}    : set of gradient basis functions\nforce_units :: F            : units of force\nenergy_units :: E           : units of energy\n\n\n\n\n\n","category":"type"},{"location":"#Cairn.Simulator","page":"Home","title":"Cairn.Simulator","text":"An abstract type for simulators.  Custom simulators should sub-type this abstract type.\n\n\n\n\n\n","category":"type"},{"location":"#Cairn.Sinusoid","page":"Home","title":"Cairn.Sinusoid","text":"Sinusoid(; force_units, energy_units)\n\nA sinusoidal potential energy surface with multiple basins.\n\nThe potential energy is defined as\n\nV(xy) = x^220 + y^220 + sin(x) + sin(y)\n\nThis potential is only compatible with 2D systems.\n\n\n\n\n\n","category":"type"},{"location":"#Cairn.SteinRepulsiveLangevin","page":"Home","title":"Cairn.SteinRepulsiveLangevin","text":"SteinRepulsiveLangevin(; <keyword arguments>)\n\nSimulates a hybrid simulator combining OverdampedLangevin and a Stein repulsive term, after Ye et al. 2020 (https://arxiv.org/abs/2002.09070).\n\nArguments\n\ndt::S               : the time step of the simulation.\nkernel::K           : kernel used for computing kernelized forces.\nsys_fix::Vector{X}  : Vector of systems of fixed atoms for computing kernelized forces.\ntemperature::T      : the equilibrium temperature of the simulation.\nfriction::F         : the friction coefficient of the simulation.\nremove_CM_motion=1  : remove the center of mass motion every this number of steps,   set to false or 0 to not remove center of mass motion.\n\n\n\n\n\n","category":"type"},{"location":"#Cairn.StepComponentLogger","page":"Home","title":"Cairn.StepComponentLogger","text":"StepComponentLogger(observable::T, nsteps::Int, history::Vector{T})\n\nA logger which holds a record of components of the update step to the coordinate positions. \n\nArguments\n\nobservable::T   : observable quantity of type T. \nn_steps::Int   : time step interval at which the observable is recorded. \nhistory::Vector{T}   : record of values of the observable.\n\n\n\n\n\n","category":"type"},{"location":"#Cairn.StochasticSVGD","page":"Home","title":"Cairn.StochasticSVGD","text":"StochasticSVGD(; <keyword arguments>)\n\nSimulates a stochastic variant of Stein variational gradient descent (SVGD).\n\nArguments\n\ndt::S               : the time step of the simulation.\nkernel::K           : kernel used for computing kernelized forces.\nkernel_bandwidth::Function  : function which computes the kernel bandwidth.\nsys_fix::Vector{X}  : Vector of systems of fixed atoms for computing kernelized forces.\ntemperature::T      : the equilibrium temperature of the simulation.\nfriction::F         : the friction coefficient of the simulation.\nremove_CM_motion=1  : remove the center of mass motion every this number of steps,   set to false or 0 to not remove center of mass motion.\n\n\n\n\n\n","category":"type"},{"location":"#Cairn.TimeInterval-Tuple{}","page":"Home","title":"Cairn.TimeInterval","text":"TimeInterval(; interval::Real=1)\n\nAn active learning trigger activated after a fixed number of simulation steps specified by interval.\n\n\n\n\n\n","category":"method"},{"location":"#Cairn.TrainingLogger","page":"Home","title":"Cairn.TrainingLogger","text":"TrainingLogger(params::T, nsteps::Int, history::Vector{T})\n\nA logger which holds a record of parameters of the ML potential over iterations of training.\n\nArguments\n\nparams::T   : parameters of type T. \nn_steps::Int   : time step interval at which the parameters are recorded. \nhistory::Vector{T}   : record of values of the parameter.\n\n\n\n\n\n","category":"type"},{"location":"#Cairn.TriggerLogger","page":"Home","title":"Cairn.TriggerLogger","text":"TriggerLogger(trigger::ActiveLearningTrigger, nsteps::Int, history::Vector{T})\n\nA logger which holds a record of evaluations of the trigger function for active learning. \n\nArguments\n\ntrigger::ActiveLearningTrigger   : trigger function.\nn_steps::Int   : time step interval at which the trigger function is evaluated.\nhistory::Vector{T}   : record of the trigger function evaluation.\n\n\n\n\n\n","category":"type"},{"location":"#Cairn.MaxKernelEval-Tuple{}","page":"Home","title":"Cairn.MaxKernelEval","text":"MaxKernelEval(; thresh::Real=0.1)\n\nAn active learning trigger activated when the maximum kernel evaluation falls below a threshold thresh.\n\n\n\n\n\n","category":"method"},{"location":"#Cairn.MeanKSD-Tuple{}","page":"Home","title":"Cairn.MeanKSD","text":"MeanKSD(; thresh::Real=0.1)\n\nAn active learning trigger activated when the mean magnitude of kernel Stein discrepancy (KSD) metric falls below a threshold thresh.\n\n\n\n\n\n","category":"method"},{"location":"#Cairn.TotalDegreeMset-Tuple{Int64, Int64}","page":"Home","title":"Cairn.TotalDegreeMset","text":"TotalDegreeMset(p::Int, d::Int)\n\nReturn a matrix of indices, where the columns are the multi-indices in dimension d with the total degree less than or equal to p.\n\nArguments\n\np :: Int        : The total degree of the polynomials\nd :: Int        : The dimension of the problem\n\n\n\n\n\n","category":"method"},{"location":"#Cairn.compute_error_metrics!-Tuple{ActiveLearnRoutine}","page":"Home","title":"Cairn.compute_error_metrics!","text":"compute_error_metrics!(al::ActiveLearnRoutine)\n\nAppends error metric calculations (RMSE in energies and forces, Fisher divergence in probability measures) to al.error_hist.\n\n\n\n\n\n","category":"method"},{"location":"#Cairn.compute_kernelized_forces-Tuple{Molly.System, Vector{<:Molly.System}, PotentialLearning.Kernel}","page":"Home","title":"Cairn.compute_kernelized_forces","text":"computekernelizedforces(sys::System, ens_fix::Vector{<:System}, knl::Kernel; feature::Union{Nothing,Feature} = nothing)\n\nA function which computes the kernel and gradient kernel terms between a single atom in sys and fixed atoms in ens_fix, using kernel function knl.\n\n\n\n\n\n","category":"method"},{"location":"#Cairn.compute_kernelized_forces-Tuple{Vector{<:Molly.System}, PotentialLearning.Kernel}","page":"Home","title":"Cairn.compute_kernelized_forces","text":"computekernelizedforces(ens::Vector{<:System}, knl::Kernel)\n\nA function which computes the kernel and gradient kernel terms all atoms in ens using kernel function knl.\n\n\n\n\n\n","category":"method"},{"location":"#Cairn.get_atoms-Tuple{Vector{<:Molly.System}}","page":"Home","title":"Cairn.get_atoms","text":"get_atoms(ens::Vector{<:System})\n\nReturns a vector of atoms contained in all systems of the ensemble ens.\n\n\n\n\n\n","category":"method"},{"location":"#Cairn.get_coords-Tuple{Vector{<:Molly.System}}","page":"Home","title":"Cairn.get_coords","text":"get_coords(ens::Vector{<:System})\n\nReturns a vector of atomic coordinates contained in all systems of the ensemble ens.\n\n\n\n\n\n","category":"method"},{"location":"#Cairn.has_step_property-Tuple{Molly.System}","page":"Home","title":"Cairn.has_step_property","text":"has_step_property(sys::System)\nhas_step_property(logger::Logger)\n\nReturns a Bool evaluating whether the system sys contains any loggers which are of type StepComponentLogger.\n\n\n\n\n\n","category":"method"},{"location":"#Cairn.trigger_activated-Tuple{UpperThreshold}","page":"Home","title":"Cairn.trigger_activated","text":"trigger_activated(trigger::ActiveLearningTrigger, kwargs...)\ntrigger_activated(trigger::Bool, kwargs...)\n\nA function which returns a Bool of whether or not the trigger for active learning is activated.\n\n\n\n\n\n","category":"method"},{"location":"#Cairn.update_sys-Tuple{Molly.OverdampedLangevin, Molly.System, Vector{<:Molly.System}}","page":"Home","title":"Cairn.update_sys","text":"update_sys(sim::Simulator)\n\nPerforms online active learning by molecular dynamics simulation defined in sim, using the retraining criterion defined in trigger.\n\nArguments\n\nsim::Simulator : simulator of the equations of motion\nsys::Union{System,Vector{<:System}} : simulation system\nsys_train::Vector{<:System}: Vector of systems in the training data\n\nKeyword Arguments\n\nn_add::Integer=10 : number of samples to add to sys_train\nsteps::Integer=1000 : number of steps in the sample path over which to draw new training data\n\n\n\n\n\n","category":"method"},{"location":"#PotentialLearning.get_values-Tuple{Molly.GeneralObservableLogger}","page":"Home","title":"PotentialLearning.get_values","text":"get_values(logger::Logger)\nget_values(qt::Vector)\nget_values(qt::Real)\n\nReturns a Vector of unitless values of the logger history, vector, or scalar quantity. \n\n\n\n\n\n","category":"method"}]
}
